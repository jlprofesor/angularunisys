angular.io
https://angular.io/cli
Instalar el cli
---------------------------------------------------------------------------------------------------
Entrar como administradores al terminal

npm uninstall -g @angular/cli
npm install -g @angular/cli@13.2 // Si piden versión concreta
---------------------------------------------------------------------------------------------------
ng new AngularBasicos
---------------------------------------------------------------------------------------------------
ng serve -o
---------------------------------------------------------------------------------------------------
ng generate component binding
---------------------------------------------------------------------------------------------------
--app.component.html

<app-binding></app-binding>

---------------------------------------------------------------------------------------------------
--binding.component.html

<h1>
  <!--Primer tipo de binding: INTERPOLACIÓN: Vinculación a propiedades definidas en la lógica del componente-->
  {{titulo}}
</h1>
<div>
  <!-- A continuación elementos HTML a los que definimos valores por medio de atributos. -->
  <img src="https://angular.io/assets/images/logos/angular/angular.png">
  <button disabled>Estoy desactivado</button>
  <br>
  <!-- Tal como están, la imagen y el botón tendrán siempre el mismo valor en sus propiedades "src" y "disabled".
       Sin embargo, si quisieras asignar un valor dinámico a uno de esos atributos, tomando algo definido mediante una propiedad del componente, habría
        que acudir al PROPERTY BINDING o a la INTERPOLACIÓN. 
      El llamado EVENT BINDING vincula eventos a funciones Angular-->

  <img [src]="rutaImagen" [hidden]="ocultarImagen">
  <img src="{{rutaImagen}}">
  <button [disabled]="estadoBoton" (click)="muestraOcultaImagen()">Estoy activado o desactivado y muestro/oculto la imagen</button>
  <!-- El siguiente es un mal uso del binding. Con atributos que aceptan valores booleanos siempre usaremos la técnica del PROPERTY BINDING -->
  <!-- <button disabled="{{estadoBoton}}">Mal uso del binding</button> -->
  <button (click)="cambiarEstadoBoton()">Cambiar estado del otro botón</button>

  <!-- Gracias al DOBLE BINDING podemos hacer que el valor de una propiedad pueda ser modificable desde la vista a la lógica y viceversa
  Utilizamos para esto la directiva ngModel encerrada entre [()] (banana in a box) -->
  <br>
  <label>¿Cómo te llamas?</label>
  <!--Enlace doble (lectura y escritura) entre la vista y el modelo-->
  <input type="text" [(ngModel)]="aprendiz" />
  <p>Bienvenido a Angular, {{ aprendiz }} </p>

</div>

---------------------------------------------------------------------------------------------------
--binding.component.ts

import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-binding',
  templateUrl: './binding.component.html',
  styleUrls: ['./binding.component.css']
})
export class BindingComponent implements OnInit {
  titulo: string = '';
  rutaImagen: string = '';
  estadoBoton: boolean = false;
  aprendiz: string = '';
  ocultarImagen: boolean = false;

  constructor() {}

  ngOnInit() {
    this.titulo = 'Ejemplo de binding en Angular';
    this.rutaImagen = 'https://angular.io/assets/images/logos/angular/angular.png';
    this.estadoBoton = false;
    this.ocultarImagen = false;
    this.aprendiz = '';
  }

  cambiarEstadoBoton() {
    this.estadoBoton = !this.estadoBoton;
  }

  muestraOcultaImagen() {
    this.ocultarImagen = !this.ocultarImagen;
  }
}

---------------------------------------------------------------------------------------------------
--app.module

import { FormsModule } from '@angular/forms';

......

  imports: [
    BrowserModule, import { FormsModule } from '@angular/forms';
  ],

---------------------------------------------------------------------------------------------------
ng g c directivas
---------------------------------------------------------------------------------------------------
--directivas.component.html

<h1>Directivas en Angular</h1>
<!-- La directiva ngIf permite poner/quitar elementos del DOM según estados de propiedades o expresiones lógicas -->
<label>Escribe angular para ver el logo de Angular</label>
<input type="text" [(ngModel)]="logo" />
<div *ngIf="logo == 'angular'; then logoAngular; else otroLogo">texto ignorado</div>

<ng-template #logoAngular><img src="https://angular.io/assets/images/logos/angular/angular.png" /></ng-template>
<ng-template #otroLogo><img src="https://www.logaster.com.es/static/images/not_allowed.png" /></ng-template>

<img *ngIf="logo == 'angular'" src="https://angular.io/assets/images/logos/angular/angular.png" />
<img *ngIf="!(logo == 'angular')" src="https://www.logaster.com.es/static/images/not_allowed.png" />

<!-- La directiva ngFor permite generar contenido de forma dinámica según una iteración de un array -->
<h3>Receta de tortilla</h3>
<ul>
  <li *ngFor="let ingrediente of ingredientes; let i = index">{{ i + 1 }} - {{ ingrediente }}</li>
</ul>
<label>Nuevo ingrediente</label>
<input type="text" [(ngModel)]="ingrediente" />
<button (click)="agregarIngrediente()">Agregar ingrediente</button>
<br />
<label>Nuevo ingrediente</label>
<input type="text" #ing />
<button (click)="agregarIngrediente2(ing.value)">Agregar ingrediente</button>

---------------------------------------------------------------------------------------------------
--directivas.component.ts

import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-directivas',
  templateUrl: './directivas.component.html',
  styleUrls: ['./directivas.component.css']
})
export class DirectivasComponent implements OnInit {
  logo: string = '';
  ingrediente: string = '';
  ingredientes: string[] = ['Huevos', 'Aceite', 'Sal'];

  constructor() {}

  ngOnInit() {}

  agregarIngrediente() {
    this.ingredientes.push(this.ingrediente);
  }

  agregarIngrediente2(ingrediente: string) {
    const existe = this.ingredientes.find((x) => x === ingrediente);
    if (!existe) {
      this.ingredientes.push(ingrediente);
    } else {
      alert(ingrediente + ' ya existe');
    }
  }
}

---------------------------------------------------------------------------------------------------
--app.component.html

<app-binding></app-binding>

<hr>

<app-directivas></app-directivas>

---------------------------------------------------------------------------------------------------
ng generate component formularioBasico
---------------------------------------------------------------------------------------------------
--index.html

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">

---------------------------------------------------------------------------------------------------
--formulario-basico.component.html

<div class="container">
  <h1>Persona</h1>
  <form (submit)="save()" ngNativeValidate>
    <div class="form-group">
      <label>Nombre</label>
      <input type="text" class="form-control" name="nombre" [(ngModel)]="nombre" required>
    </div>
    <div class="form-group">
      <label>Apellido</label>
      <input type="text" class="form-control" name="apellido" [(ngModel)]="apellido" required>
    </div>
    <div class="form-group">
      <label>Edad</label>
      <input type="number" class="form-control" name="edad" [(ngModel)]="edad">
    </div>
  </form>
  <pre>Valores introducidos: <br>{{nombre}}, {{apellido}}, {{edad}}</pre>
  <button type="submit" class="btn btn-primary">Aceptar</button>
</div>

---------------------------------------------------------------------------------------------------
--formulario-basico.component.ts

import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-formulario-basico',
  templateUrl: './formulario-basico.component.html',
  styleUrls: ['./formulario-basico.component.css']
})
export class FormularioBasicoComponent implements OnInit {
  nombre: string = '';
  apellido: string = '';
  edad: number = 0;
  constructor() {}

  ngOnInit() {
  }

  save() {
    console.log(this.nombre);
    console.log(this.apellido);
    console.log(this.edad);
  }
}

---------------------------------------------------------------------------------------------------
--app.component.html

<!-- <app-binding></app-binding>

<hr>

<app-directivas></app-directivas> -->

<app-formulario-basico></app-formulario-basico>

---------------------------------------------------------------------------------------------------
ng generate component formularioAvanzado
---------------------------------------------------------------------------------------------------
--app.component.html

.....

<hr>

<app-formulario-avanzado></app-formulario-avanzado>

---------------------------------------------------------------------------------------------------
Creamos en carpeta formulario-avanzado user.interface.ts
---------------------------------------------------------------------------------------------------
--user.interface.ts

export interface IUser {
  nombre: string;
  edad: number;
  genero: string;
  rol: string;
  activo: boolean;
  aficiones: string[];
}

// Esta interface va a determinar los campos que va a tener el usuario

---------------------------------------------------------------------------------------------------
--formulario-avanzado.component.html

<div class="container">
  <h1>Agregar usuario</h1>
  <form #f="ngForm" (ngSubmit)="save(f.value, f.valid)">
    <div class="form-group">
      <label>Nombre</label>
      <input type="text" class="form-control" name="nombre" [(ngModel)]="user.nombre" required />
    </div>
    <div class="form-group mt-2">
      <label>Edad</label>
      <input type="number" class="form-control" name="edad" [(ngModel)]="user.edad" />
      <span class="form-text text-danger" *ngIf="edadNoValida()"> Debe ser superior a 0 </span>
      <!-- <span class="form-text text-danger" *ngIf="f.controls.edad.value<0 && f.controls.edad.touched">
        Debe ser superior a 0
      </span> -->
    </div>
    <div class="form-group mt-2">
      <label>Sexo</label>
      <div class="radio" *ngFor="let genero of generos">
        <label>
          <input type="radio" name="genero" [(ngModel)]="user.genero" [value]="genero.value" />
          {{ genero.display }}
        </label>
      </div>
    </div>
    <div class="form-group mt-2">
      <label>Rol</label>
      <select name="role" class="form-control" [(ngModel)]="user.rol">
        <option *ngFor="let rol of roles" [value]="rol.value">{{ rol.display }}</option>
      </select>
    </div>

    <div class="form-group mt-2">
      <div class="checkbox">
        <label>
          <input type="checkbox" name="activo" [(ngModel)]="user.activo" />
          Es Activo
        </label>
      </div>
    </div>
    <div class="form-group my-2">
      <label>Aficiones</label>
      <select multiple name="aficiones" class="form-control" [(ngModel)]="user.aficiones">
        <option *ngFor="let aficion of aficiones" [value]="aficion.value">{{ aficion.display }}</option>
      </select>
    </div>

    <button type="submit" class="btn btn-primary" [disabled]="f.invalid">
      Aceptar
    </button>
  </form>
  <div class="my-2" style="border-radius: 5px; padding: 10px; border: 1px solid; background-color: lightgray" *ngIf="f">
    <div>Detalles del formulario:-</div>
    <pre>¿Es válido?: <br>{{f.valid}}</pre>
    <pre>¿Se ha aceptado?: <br>{{f.submitted }}</pre>
    <pre>Valores introducidos: <br>{{f.value | json}}</pre>
    <pre>¿Se ha tocado?: <br>{{f.touched }}</pre>
  </div>
</div>

---------------------------------------------------------------------------------------------------
--formulario-avanzado.component.ts

import { Component, OnInit, ViewChild } from '@angular/core';
import { NgForm } from '@angular/forms';
import { IUser } from './user.interface';

@Component({
  selector: 'app-formulario-avanzado',
  templateUrl: './formulario-avanzado.component.html',
  styleUrls: ['./formulario-avanzado.component.css']
})
export class FormularioAvanzadoComponent implements OnInit {
  @ViewChild('f') miFormulario!: NgForm;

  user!: IUser;

  generos = [
    { value: 'M', display: 'Mujer' },
    { value: 'H', display: 'Hombre' }
  ];

  roles = [
    { value: 'admin', display: 'Administrador' },
    { value: 'guest', display: 'Invitado' },
    { value: 'custom', display: 'Otro' }
  ];

  aficiones = [
    { value: 'game', display: 'Gaming' },
    { value: 'tech', display: 'Tecnología' },
    { value: 'life', display: 'Lifestyle' }
  ];

  // Aquí el componente

  // El código visual estarÃ¡ en el archivo app.component.html que luego veremos.
  // La clase del componente AppComponent implementa la interface OnInit.
  // Esta interface obliga a incluir el método ngOnInit que inicia el modelo con unos valores por defecto.
  // Se exponen varios atributos. El atributo user que será de tipo IUser y otros que van a servir para configurar
  // y dar aspecto a algunos elementos del formulario.
  // El método save registrará si el formulario está bien introducido o no.

  constructor() {}

  ngOnInit() {
    // Inicialización del modelo
    this.user = {
      nombre: '',
      edad: 0,
      genero: this.generos[0].value, // Mujer por defecto
      rol: this.roles[1].value,
      activo: false,
      aficiones: [this.aficiones[1].value] // Tecnología por defecto
    };
  }

  edadNoValida(): boolean {
    if (this.miFormulario?.controls.edad) {
      const noValida = this.miFormulario?.controls.edad.touched && this.miFormulario?.controls.edad.value <= 0;
      noValida
        ? this.miFormulario?.controls.edad.setErrors({ edad: true })
        : this.miFormulario?.controls.edad.setErrors(null);
      return noValida;
    }
    return true;
  }

  save(f: IUser, isValid: boolean | null) {
    if (!isValid) return;
    console.log(f);
    this.miFormulario.reset();
    // this.miFormulario.reset({ edad: 0 });
  }
}

---------------------------------------------------------------------------------------------------
ng generate component formularioReactivo
ng generate service app
---------------------------------------------------------------------------------------------------
--app.module.ts

....
import { HttpClientModule } from '@angular/common/http';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
....
imports: [BrowserModule, FormsModule, ReactiveFormsModule, HttpClientModule],

---------------------------------------------------------------------------------------------------
--app.service.ts

import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { AbstractControl, AsyncValidator, ValidationErrors } from '@angular/forms';
import { Observable } from 'rxjs';
import { map, delay } from 'rxjs/operators';

@Injectable({
  providedIn: 'root'
})
export class AppService implements AsyncValidator {
  constructor(private http: HttpClient) {}

  validate(control: AbstractControl): Observable<ValidationErrors | null> {
    const email = control.value;
    return this.http.get<any[]>('./assets/people.json').pipe(
      // delay(3000),
      map((resp) => {
        return resp.find((x) => x.email === email) ? { emailOcupado: true } : null;
      })
    );
  }
}

---------------------------------------------------------------------------------------------------
Creamos en carpeta formulario-reactivo user-login.interface.ts
---------------------------------------------------------------------------------------------------
--user-login.interface.ts

export interface IUserLogin {
  userName: string;
  email: string;
  password: string;
}

---------------------------------------------------------------------------------------------------
--formulario-reactivo.component.ts

import { Component, OnInit } from '@angular/core';
import { FormGroup, FormBuilder, Validators, AbstractControl, FormControl, ValidationErrors } from '@angular/forms';
import { AppService } from '../app.service';
import { IUserLogin } from './user-login.interface';

@Component({
  selector: 'app-formulario-reactivo',
  templateUrl: './formulario-reactivo.component.html',
  styleUrls: ['./formulario-reactivo.component.css']
})
export class FormularioReactivoComponent implements OnInit {
  mensajeError: string = '';
  myForm: FormGroup;
  show = false;

  constructor(private formBuilder: FormBuilder, private emailAsyncValidator: AppService) {
    this.myForm = this.formBuilder.group(
      {
        userName: ['', [Validators.required, Validators.maxLength(50), this.noWhitespaceValidator]],
        email: [
          '',
          [
            Validators.required,
            Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$'),
            Validators.maxLength(100)
          ],
          [this.emailAsyncValidator]
        ],
        password: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(50)]],
        password2: [''],
        acepto: [false]
      },
      {
        validators: this.passwordMatching
      }
    );
  }

  ngOnInit() {
    this.myForm.valueChanges.subscribe((x) => {
      // console.log(x);
    });

    this.myForm.controls.acepto.valueChanges.subscribe((x) => {
      //  console.log(x);
      // deshabilitar botón
    });
  }

  // Si se retorna null no hay error
  // Si se retorna algo se considera como un error

  noWhitespaceValidator(control: FormControl): ValidationErrors | null {
    const isWhitespace = control.value.toString().trim().length === 0;
    const isValid = !isWhitespace;
    return isValid ? null : { whitespace: true };
  }

  passwordMatching(formGroup: AbstractControl) {
    const pass1 = formGroup.get('password')?.value;
    const pass2 = formGroup.get('password2')?.value;

    if (pass1 !== pass2) {
      formGroup.get('password2')?.setErrors({ invalidPass: true });
      console.log('no');
      return { invalidPass: true };
    }
    console.log('sí');
    formGroup.get('password2')?.setErrors(null);

    return null;
  }

  password() {
    this.show = !this.show;
  }

  createUser() {
    if (!this.myForm.value.acepto) {
      this.mensajeError = 'Debe aceptar la política de privacidad y las condiciones de uso';
      return;
    }

    const user: IUserLogin = {
      email: this.myForm.value.email,
      password: this.myForm.value.password,
      userName: this.myForm.value.userName
    };

    this.myForm.reset();
    console.log(user);
  }
}

---------------------------------------------------------------------------------------------------
--formulario-reactivo.component.html

<div class="container">
  <h1>Registro</h1>
  <form [formGroup]="myForm" (ngSubmit)="createUser()">
    <div class="form-group">
      <label>Usuario</label>
      <input
        type="text"
        class="form-control"
        [ngClass]="{ 'input-error': myForm.controls.userName.invalid && myForm.controls.userName.touched }"
        autofocus
        placeholder="Nombre"
        formControlName="userName"
        maxlength="50"
      />
      <div *ngIf="myForm.controls.userName.invalid && myForm.controls.userName.touched">
        <p class="caption text-danger mt-1 ml-4">Nombre obligatorio</p>
      </div>
    </div>
    <div class="form-group mt-2">
      <label>Email</label>
      <input
        type="email"
        class="form-control"
        name="email"
        [ngClass]="{ 'input-error': myForm.controls.email.invalid && myForm.controls.email.touched }"
        placeholder="Email"
        formControlName="email"
        maxlength="100"
      />
      <div *ngIf="myForm.controls.email.invalid && myForm.controls.email.touched">
        <p class="caption text-danger mt-1 ml-4" *ngIf="myForm.controls.email.errors?.required">Email obligatorio</p>
        <p class="caption text-danger mt-1 ml-4" *ngIf="myForm.controls.email.errors?.pattern">Email incorrecto</p>
        <p class="caption text-danger mt-1 ml-4" *ngIf="myForm.controls.email.errors?.emailOcupado">Email ocupado</p>
      </div>
    </div>
    <div class="form-group mt-2">
      <label>Contraseña</label>
      <div class="input-group">
        <input
          type="password"
          class="form-control"
          [ngClass]="{ 'input-error': myForm.controls.password.invalid && myForm.controls.password.touched }"
          (keydown.space)="$event.preventDefault()"
          [type]="show ? 'text' : 'password'"
          formControlName="password"
          maxlength="50"
          placeholder="Contraseña"
        />
        <span class="input-group-btn">
          <button type="button" (click)="password()" class="btn btn-secondary">Mostrar/ocultar contraseña</button>
        </span>
      </div>
      <div *ngIf="myForm.controls.password.invalid && myForm.controls.password.touched">
        <p class="caption text-danger mt-1 ml-4" *ngIf="myForm.controls.password.errors?.required">
          Contraseña obligatoria
        </p>
        <p class="caption text-danger mt-1 ml-4" *ngIf="myForm.controls.password.errors?.minlength">
          6 caracteres mínimo
        </p>
      </div>
    </div>
    <div class="form-group my-2">
      <input
        type="password"
        [ngClass]="{ 'input-error': myForm.controls.password2.invalid && myForm.controls.password2.touched }"
        [type]="show ? 'text' : 'password'"
        class="form-control"
        formControlName="password2"
        (keydown.space)="$event.preventDefault()"
        placeholder="Confirmar contraseña"
        maxlength="50"
      />
      <div *ngIf="myForm.controls.password2?.invalid && myForm.controls.password2.touched">
        <p class="caption text-danger mt-1 ml-4" *ngIf="myForm.controls.password2.errors?.invalidPass">
          Las contraseñas no coinciden
        </p>
      </div>
    </div>
    <div class="checkbox">
      <label
        ><input type="checkbox" class="form-check-input" formControlName="acepto" /> He leído y acepto las condiciones
        de uso y la política de privacidad</label
      >
    </div>
    <div class="form-button text-center">
      <button
        type="submit"
        class="btn btn-primary"
        [class.btnDisabled]="myForm.invalid || myForm.pending || myForm.controls.acepto.value == false"
        [disabled]="myForm.invalid || myForm.pending || myForm.controls.acepto.value == false"
      >
        Crear cuenta
      </button>
    </div>
  </form>
</div>

---------------------------------------------------------------------------------------------------
--formulario-reactivo.component.css

.input-error {
  border: 1px solid lightcoral !important;
}

.caption {
  font-size: x-small;
}

.btnDisabled {
  background-color: red !important;
}

---------------------------------------------------------------------------------------------------
--app-component.html

<app-formulario-reactivo></app-formulario-reactivo>

---------------------------------------------------------------------------------------------------
ng g c formularioLogin
ng g d formulario-login/errorMsg
---------------------------------------------------------------------------------------------------
--error-msg.directive.ts

import { Directive, ElementRef, Input, OnInit } from '@angular/core';

@Directive({
  selector: '[error-msg]'
})
export class ErrorMsgDirective implements OnInit {
  private _color: string = 'red';
  private _mensaje: string = 'Este campo es requerido';

  htmlElement: ElementRef<HTMLElement>;

  @Input() set color(valor: string) {
    this._color = valor;
    this.setColor();
  }

  @Input() set mensaje(valor: string) {
    this._mensaje = valor;
    this.setMensaje();
  }

  @Input() set valido(valor: boolean) {
    if (valor) {
      this.htmlElement.nativeElement.classList.add('hidden');
    } else {
      this.htmlElement.nativeElement.classList.remove('hidden');
    }
  }

  constructor(private el: ElementRef<HTMLElement>) {
    this.htmlElement = el;
  }

  ngOnInit(): void {
    this.setEstilo();
    this.setColor();
    this.setMensaje();
  }

  setEstilo(): void {
    this.htmlElement.nativeElement.classList.add('form-text');
  }

  setColor(): void {
    this.htmlElement.nativeElement.style.color = this._color;
  }

  setMensaje(): void {
    this.htmlElement.nativeElement.innerText = this._mensaje;
  }
}

---------------------------------------------------------------------------------------------------
--formulario-login.component.ts

import { Component, OnInit } from '@angular/core';
import { FormGroup, FormBuilder, Validators } from '@angular/forms';
import { AppService } from '../app.service';
import { IUserLogin } from '../formulario-reactivo/user-login.interface';

@Component({
  selector: 'app-formulario-login',
  templateUrl: './formulario-login.component.html',
  styleUrls: ['./formulario-login.component.css']
})
export class FormularioLoginComponent implements OnInit {
  mensajeError: string = '';
  color = 'violet';
  myForm: FormGroup;
  show = false;

  constructor(private formBuilder: FormBuilder, private appService: AppService) {
    this.myForm = this.formBuilder.group({
      email: [
        '',
        [
          Validators.required,
          Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$'),
          Validators.maxLength(100)
        ],
        [this.appService.emailLogin(true)] // Se pueden pasar argumentos aunque en este ejemplo no sean operativos
      ],
      password: ['', [Validators.required, Validators.maxLength(50)]]
    });
  }

  ngOnInit() {}

  password() {
    this.show = !this.show;
  }

  login() {
    const user: IUserLogin = {
      email: this.myForm.value.email,
      password: this.myForm.value.password
    };

    this.myForm.reset();
    console.log(user);
  }

  hasError(campo: string): boolean {
    const hasError = this.myForm.get(campo)?.invalid && this.myForm.get(campo)?.touched;
    return hasError || false;
  }
}

---------------------------------------------------------------------------------------------------
--formulario-login.component.html

<div class="container">
  <h1>Registro</h1>
  <form [formGroup]="myForm" (ngSubmit)="login()">
    <div class="form-group mt-2">
      <label>Email</label>
      <input
        type="email"
        class="form-control"
        [ngClass]="{ 'input-error': myForm.controls.email.invalid && myForm.controls.email.touched }"
        placeholder="Email"
        formControlName="email"
        maxlength="100"
      />
      <div *ngIf="hasError('email')">
        <span error-msg mensaje="Email incorrecto" [color]="color" [valido]="!hasError('email')"> </span>
      </div>
    </div>
    <div class="form-group mt-2">
      <label>Contraseña</label>
      <div class="input-group">
        <input
          type="password"
          class="form-control"
          [ngClass]="{ 'input-error': myForm.controls.password.invalid && myForm.controls.password.touched }"
          (keydown.space)="$event.preventDefault()"
          [type]="show ? 'text' : 'password'"
          formControlName="password"
          maxlength="50"
          placeholder="Contraseña"
        />
        <span class="input-group-btn">
          <button type="button" (click)="password()" class="btn btn-secondary">Mostrar/ocultar contraseña</button>
        </span>
      </div>
      <div *ngIf="hasError('password')">
        <span error-msg mensaje="Contraseña obligatoria" [color]="color" [valido]="!hasError('password')"> </span>
      </div>
    </div>

    <div class="form-button text-center mt-2">
      <button
        type="submit"
        class="btn btn-primary"
        [class.btnDisabled]="myForm.invalid || myForm.pending"
        [disabled]="myForm.invalid || myForm.pending"
      >
        Login
      </button>
    </div>
  </form>
</div>

---------------------------------------------------------------------------------------------------
--formulario-login.component.css

.btnDisabled {
  background-color: red !important;
}

---------------------------------------------------------------------------------------------------
--app.service.ts

import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { AbstractControl, AsyncValidator, AsyncValidatorFn, ValidationErrors } from '@angular/forms';
import { Observable } from 'rxjs';
import { map, delay, debounceTime } from 'rxjs/operators';

@Injectable({
  providedIn: 'root'
})
export class AppService implements AsyncValidator {
  constructor(private http: HttpClient) {}

  // implements AsyncValidator obliga a implementar la interface validate. Por defecto irá a esta para validar

  validate(control: AbstractControl): Observable<ValidationErrors | null> {
    const email = control.value;
    return this.http.get<any[]>('./assets/people.json').pipe(
      delay(3000),
      map((resp) => {
        return resp.find((x) => x.email === email) ? { emailOcupado: true } : null;
      })
    );
  }

  emailLogin(arg: boolean): AsyncValidatorFn {
    console.log(arg);
    return (control: AbstractControl): Observable<ValidationErrors | null> => {
      const email = control.value;
      return this.http.get<any[]>('./assets/people.json').pipe(
        map((resp) => {
          return resp.find((x) => x.email === email) ? null : { emailNoRegistrado: true };
        })
      );
    };
  }
}

---------------------------------------------------------------------------------------------------
--user.login.interface.ts

export interface IUserLogin {
  userName?: string;
  email: string;
  password: string;
}

---------------------------------------------------------------------------------------------------
--app-component.html

<app-formulario-login></app-formulario-login>

---------------------------------------------------------------------------------------------------
ng generate component formularioReactivoDinamico
---------------------------------------------------------------------------------------------------
--formulario-reactivo-dinamico.component.ts

import { Component, OnInit } from '@angular/core';
import { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-formulario-reactivo-dinamico',
  templateUrl: './formulario-reactivo-dinamico.component.html',
  styleUrls: ['./formulario-reactivo-dinamico.component.css']
})
export class FormularioReactivoDinamicoComponent implements OnInit {
  myForm: FormGroup = this.fb.group({
    nombre: ['', [Validators.required, Validators.minLength(3)]],
    bandas: this.fb.array(
      [
        ['U2', Validators.required],
        ['Coldplay', Validators.required]
      ],
      Validators.required
    )
  });

  nuevaBanda: FormControl = this.fb.control('', Validators.required);

  get bandasArr() {
    return this.myForm.get('bandas') as FormArray;
  }

  constructor(private fb: FormBuilder) {}

  ngOnInit() {}

  campoEsValido(campo: string) {
    return this.myForm.controls[campo].errors && this.myForm.controls[campo].touched;
  }

  agregarBanda() {
    if (this.nuevaBanda.invalid) {
      return;
    }

    const existe = this.bandasArr.controls.find((x) => x.value == this.nuevaBanda.value);

    if (existe) {
      alert('Banda existente');
      return;
    }

    this.bandasArr.push(this.fb.control(this.nuevaBanda.value, Validators.required));
    this.nuevaBanda.reset();
  }

  borrar(i: number) {
    this.bandasArr.removeAt(i);
  }

  guardar() {
    if (this.myForm.invalid) {
      return;
    }

    console.log(this.myForm.value);
  }
}

---------------------------------------------------------------------------------------------------
--formulario-reactivo-dinamico.component.html

<div class="container">
  <form autocomplete="off" [formGroup]="myForm" (ngSubmit)="guardar()">
    <!-- Nombre -->
    <div class="mb-3 row">
      <label class="col-sm-2 col-form-label">Nombre</label>
      <div class="col-sm-10">
        <input class="form-control" formControlName="nombre" placeholder="Nombre de la persona" />
        <span class="form-text text-danger" *ngIf="campoEsValido('nombre')">
          Nombre obligatorio (3 caracteres mínimo)
        </span>
      </div>
    </div>

    <!-- Agregar Banda -->
    <div class="mb-3 row">
      <label class="col-sm-2 col-form-label">Agregar</label>
      <div class="col-sm-10">
        <div class="input-group">
          <input
            class="form-control"
            [formControl]="nuevaBanda"
            placeholder="Agregar banda"
            (keyup.enter)="agregarBanda()"
          />
          <button class="btn btn-outline-primary" type="button" (click)="agregarBanda()">Agregar</button>
        </div>
      </div>
    </div>

    <!-- Lista de Bandas -->
    <div class="mb-3 row">
      <label class="col-sm-2 col-form-label">Bandas</label>
      <div class="col-sm-10" formArrayName="bandas">
        <div class="input-group mb-1" *ngFor="let banda of bandasArr.controls; let i = index">
          <input class="form-control" [formControlName]="i" />
          <button class="btn btn-outline-danger" type="button" (click)="borrar(i)">Eliminar</button>
        </div>
      </div>
    </div>

    <div class="row">
      <div class="col-sm-12">
        <button type="button" class="btn btn-primary float-end" (click)="guardar()">Guardar</button>
      </div>
    </div>
  </form>

  <span>Valid</span>
  <pre>{{ myForm.valid }}</pre>
  <br />

  <span>Value</span>
  <pre>{{ myForm.value | json }}</pre>
  <br />

  <span>Agregar Banda</span>
  <pre>{{ nuevaBanda.valid }}</pre>
  <pre>{{ nuevaBanda.value }}</pre>
</div>

---------------------------------------------------------------------------------------------------
--app-component.html

<app-formulario-reactivo-dinamico></app-formulario-reactivo-dinamico>

---------------------------------------------------------------------------------------------------
ng g c pipes
---------------------------------------------------------------------------------------------------
--pipes.component.ts

import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-pipes',
  templateUrl: './pipes.component.html',
  styleUrls: ['./pipes.component.css']
})
export class PipesComponent implements OnInit {
  nombre = 'Juan Luis ochoa';
  fechaActual = new Date();
  facturacion = 1099898.5454;
  porcentaje = 0.1;

  constructor() {}

  ngOnInit() {}
}

---------------------------------------------------------------------------------------------------
--pipes.component.html

<div class="container">
  <h3><a href="https://angular.io/api?query=pipe" target="_blank">Pipes en Angular</a></h3>
  <p>Pipes básicos de texto</p>
  <ul>
    <li>Original: {{nombre}}</li>
    <li>Pipe uppercase: {{nombre | uppercase}}</li>
    <li>Pipe lowercase: {{nombre | lowercase}}</li>
    <li>Pipe titlecase {{nombre | titlecase}}</li>
  </ul>

  <p><a href="https://angular.io/api/common/DatePipe" target="_blank">Pipe date</a></p>
  <ul>
    <li>Original: {{fechaActual}}</li>
    <li>{{fechaActual | date: 'short'}}</li>
    <li>{{fechaActual | date: 'mediumDate'}}</li>
    <li>{{fechaActual | date: 'dd/MM/yyyy'}}</li>
    <li>{{fechaActual | date:'MMMM dd, yyyy'}}</li>
  </ul>

</div>

---------------------------------------------------------------------------------------------------
--app.component.html

<app-pipes></app-pipes>

---------------------------------------------------------------------------------------------------
--app.module.ts

....
// Cambiar el locale de la app
import localeEs from '@angular/common/locales/es';
import localeFr from '@angular/common/locales/fr';
import { registerLocaleData } from '@angular/common';
registerLocaleData(localeEs);
registerLocaleData(localeFr);
.....

  providers: [ { provide: LOCALE_ID, useValue: 'es' }],

.....

---------------------------------------------------------------------------------------------------
--pipes.component.html

<div class="container">
  <h3><a href="https://angular.io/api?query=pipe" target="_blank">Pipes en Angular</a></h3>
  <p>Pipes básicos de texto</p>
  <ul>
    <li>Original: {{nombre}}</li>
    <li>Pipe uppercase: {{nombre | uppercase}}</li>
    <li>Pipe lowercase: {{nombre | lowercase}}</li>
    <li>Pipe titlecase {{nombre | titlecase}}</li>
  </ul>

  <p><a href="https://angular.io/api/common/DatePipe" target="_blank">Pipe date</a></p>
  <ul>
    <li>Original: {{fechaActual}}</li>
    <li>{{fechaActual | date: 'short'}}</li>
    <li>{{fechaActual | date: 'mediumDate'}}</li>
    <li>{{fechaActual | date: 'dd/MM/yyyy'}}</li>
    <li>{{fechaActual | date:'MMMM dd, yyyy'}}</li>
    <li>{{fechaActual | date:'long':'GMT-4'}}</li>
    <li>{{fechaActual | date:'long':'':'fr' }}</li>
  </ul>

  <p>Pipes numéricos</p>
  <ul>
    <li>Original: {{facturacion}}</li>
    <li>{{facturacion | number:'1.2-2' }}</li>
    <li>{{facturacion | currency:'EUR':'symbol-narrow':'1.4-4' }}</li>
    <li>{{porcentaje | percent:'2.2-2'}}</li>
  </ul>

</div>

---------------------------------------------------------------------------------------------------
ng g c pipesMenosComunes
---------------------------------------------------------------------------------------------------
--app.component.html

<app-pipes-menos-comunes></app-pipes-menos-comunes>

---------------------------------------------------------------------------------------------------
--pipes-menos-comunes.component.ts

import { Component, OnInit } from '@angular/core';
import { interval } from 'rxjs';

@Component({
  selector: 'app-pipes-menos-comunes',
  templateUrl: './pipes-menos-comunes.component.html',
  styleUrls: ['./pipes-menos-comunes.component.css']
})
export class PipesMenosComunesComponent implements OnInit {
  ngOnInit() {}

  // i18nSelect
  nombre: string = 'Juan Luis';
  genero: string = 'masculino';
  invitacionSpecs = {
    masculino: 'invitarlo',
    femenino: 'invitarla'
  };

  // i18nPlural
  // other para otras opciones. # pone el número actual
  clientes: string[] = ['Marta', 'Juan Luis', 'María', 'Pedro', 'Iker'];
  clientesSpecs = {
    '=0': 'no tenemos ningún cliente esperando.',
    '=1': 'tenemos un cliente esperando.',
    '=2': 'tenemos 2 clientes esperando.',
    other: 'tenemos # clientes esperando.'
  };

  cambiarCliente() {
    this.nombre = 'Ana';
    this.genero = 'femenino';
  }

  borrarCliente() {
    this.clientes.pop();
  }

  // KeyValue Pipe
  persona = {
    nombre: 'Juan Luis',
    edad: 35,
    direccion: 'Pamplona, Navarra'
  };

  // JsonPipe
  personas = [
    {
      nombre: 'Juan Luis',
      trabaja: true
    },
    {
      nombre: 'Marta',
      trabaja: false
    },
    {
      nombre: 'Pedros',
      trabaja: true
    }
  ];

  // Async Pipe. Para procesos asíncronos (observables y promesas)
  // interval emite valores numéricos sucesivos 0,1,2,3,4,5,6,
  // el pipe async se suscribe al observable

  miObservable = interval(2000);

  valorPromesa = new Promise((resolve, reject) => {
    setTimeout(() => {
      resolve('Fin de la promesa');
    }, 3500);
  });
}

---------------------------------------------------------------------------------------------------
--pipes-menos-comunes.component.html

<div class="container">
  <h3><a href="https://angular.io/api?query=pipe" target="_blank">Pipes en Angular</a></h3>
  <p><a href="https://angular.io/api/common/I18nSelectPipe" target="_blank">I18nSelectPipe</a></p>
  <p>
    Saludos {{ nombre }}, es un placer
    {{ genero | i18nSelect:invitacionSpecs }}
    a nuestro evento.
  </p>
  <button (click)="cambiarCliente()" class="btn btn-warning">Cambiar cliente</button>
  <br>
  <hr>

  <p><a href="https://angular.io/api/common/I18nPluralPipe" target="_blank">I18nPluralPipe</a></p>
  <p>
    Actualmente {{ clientes.length | i18nPlural:clientesSpecs }}
  </p>
  <button (click)="borrarCliente()" class="btn btn-danger">Eliminar cliente</button>
  <br>
  <hr>

  <p><a href="https://angular.io/api/common/SlicePipe" target="_blank">SlicePipe</a></p>
  <b>Original</b>
  <pre>{{ clientes }}</pre>

  <b>slice:0:2 (La segunda posición es excluyente)</b>
  <pre>{{ clientes | slice:0:2 }}</pre>

  <b>slice:1:2</b>
  <pre>{{ clientes | slice:1:2 }}</pre>

  <b>slice:1:3</b>
  <pre>{{ clientes | slice:1:3 }}</pre>

  <b>slice:3:4</b>
  <pre>{{ clientes | slice:3:4 }}</pre>

  <b>slice:0:4 (de la propiedad nombre)</b>
  <pre>{{ nombre | slice:0:4 }}</pre>
  <br>
  <hr>

  <p><a href="https://angular.io/api/common/KeyValuePipe" target="_blank">KeyValuePipe</a></p>
  <ul>
    <li *ngFor="let item of persona | keyvalue">
      <b>{{ item.key | titlecase }}:</b> {{ item.value }}
    </li>
  </ul>
  <br>
  <hr>

  <p><a href="https://angular.io/api/common/JsonPipe" target="_blank">JsonPipe</a></p>
  <pre>{{ personas | json }}</pre>
  <br>
  <hr>

  <p><a href="https://angular.io/api/common/AsyncPipe" target="_blank">AsyncPipe</a></p>
  <pre *ngIf="!(miObservable | async)">Resolviendo observable</pre>
  <pre>{{ miObservable | async }}</pre>

  <pre *ngIf="!(valorPromesa | async)">Resolviendo promesa</pre>
  <pre>{{ valorPromesa | async }}</pre>

</div>

---------------------------------------------------------------------------------------------------
ng g c pipesPersonalizados
ng g pipe pipes-personalizados/mayusculas
ng g pipe pipes-personalizados/trabaja

En carpeta pipes-personalizados, creamos el archivo pipes.models.ts
---------------------------------------------------------------------------------------------------
--app.component.html

<app-pipes-personalizados></app-pipes-personalizados>

---------------------------------------------------------------------------------------------------
--pipes.models.ts

export interface IPersona {
  nombre: string;
  trabaja: boolean;
}

---------------------------------------------------------------------------------------------------
--mayusculas.pipe.ts

import { Pipe, PipeTransform } from '@angular/core';

@Pipe({
  name: 'mayusculas'
})

// Todo pipe debe implementar PipeTransform
export class MayusculasPipe implements PipeTransform {
  transform(valor: string, enMayusculas: boolean = true): string {
    return enMayusculas ? valor.toUpperCase() : valor.toLocaleLowerCase();
  }
}

---------------------------------------------------------------------------------------------------
--trabaja.pipe.ts

import { Pipe, PipeTransform } from '@angular/core';

@Pipe({
  name: 'trabaja'
})

// Todo pipe debe implementar PipeTransform
export class TrabajaPipe implements PipeTransform {
  transform(valor: boolean): string {
    return valor ? 'trabaja' : 'no trabaja';
  }
}

---------------------------------------------------------------------------------------------------
--pipes.personalizados.component.html

<div class="container">
  <h1>Pipes personalizados</h1>
  <p>Pipes creados por {{'nosotros'| mayusculas:enMayusculas }} </p>
  <button class="btn btn-primary" (click)="cambiarMayusculas()">Testear pipe mayúsculas</button>
  <br>
  <hr>
  <table class="table">
    <thead>
      <tr>
        <th>Nombre</th>
        <th>Trabaja</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let p of personas">
        <td>{{p.nombre}}</td>
        <!-- los pipes se pueden encadenar -->
        <td>{{p.trabaja | trabaja | titlecase}}</td>
      </tr>
    </tbody>
  </table>
</div>

---------------------------------------------------------------------------------------------------
--pipes.personalizados.component.ts

import { Component, OnInit } from '@angular/core';
import { IPersona } from './pipes.models';

@Component({
  selector: 'app-pipes-personalizados',
  templateUrl: './pipes-personalizados.component.html',
  styleUrls: ['./pipes-personalizados.component.css']
})
export class PipesPersonalizadosComponent implements OnInit {
  constructor() {}

  ngOnInit() {}

  enMayusculas: boolean = true;

 
  personas: IPersona[] = [
    {
      nombre: 'Juan Luis',
      trabaja: true
    },
    {
      nombre: 'Marta',
      trabaja: false
    },
    {
      nombre: 'Pedro',
      trabaja: false
    },
    {
      nombre: 'Iker',
      trabaja: false
    },
    {
      nombre: 'Samuel',
      trabaja: true
    }
  ];

  cambiarMayusculas() {
    this.enMayusculas = !this.enMayusculas;
  }
}

---------------------------------------------------------------------------------------------------
Actividad: Pipe personalizado. Recibe un número en bytes y lo devuelve en MB. 
Ej.: Si el valor es 5000000 el pipe devuelve 5000000/(1024*1024) 'MB'
---------------------------------------------------------------------------------------------------
ng g c lifeCycle --skip-tests=true 
---------------------------------------------------------------------------------------------------
--app.component.html

<app-life-cycle></app-life-cycle>

---------------------------------------------------------------------------------------------------
--life-cycle.component.ts

import {
  Component,
  AfterContentChecked,
  AfterContentInit,
  AfterViewChecked,
  AfterViewInit,
  DoCheck,
  OnChanges,
  OnDestroy,
  OnInit,
  SimpleChanges
} from '@angular/core';
import { interval, Subscription } from 'rxjs';

@Component({
  selector: 'app-life-cycle',
  templateUrl: './life-cycle.component.html',
  styleUrls: ['./life-cycle.component.css']
})
export class LifeCycleComponent
  implements
    OnInit,
    OnChanges,
    DoCheck,
    AfterContentInit,
    AfterContentChecked,
    AfterViewInit,
    AfterViewChecked,
    OnDestroy
{
  nombre: string = 'Juan Luis';
  segundos: number = 0;
  timerSubscription!: Subscription;

  constructor() {
    // Lo primero que se ejecuta es el constructor. Haremos inyecciones de dependencia o inicializaciones antes de que se inicialice el DOM
    console.log('constructor');
  }

  ngOnInit(): void {
    // ngOnInit: El componente ya está inicializado y tenemos acceso al DOM. Se suele utilizar para realizar peticiones http iniciales
    console.log('ngOnInit');

    // ngDoCheck, ngAfterContentChecked y ngAfterViewChecked se ejecutan con el timer porque segundos forma parte del componente y detecta cambios en la propiedad
    this.timerSubscription = interval(1000).subscribe((i) => {
      this.segundos = i;
    });
  }

  ngOnChanges(changes: SimpleChanges): void {
    // Funciona cuando el componente tiene únicamente propiedades @Input()
    console.log('ngOnChanges');
  }

  ngDoCheck(): void {
    // Se ejecuta cuando hay detección de cambios, antes de hacer los cambios. Probarlo cambiando el input del nombre
    console.log('ngDoCheck');
  }

  ngAfterContentInit(): void {
    // Se ejecuta una vez después del ngOninit. No depende de detecciones de cambios posteriores.
    console.log('ngAfterContentInit');
  }

  ngAfterContentChecked(): void {
    // Se ejecuta cuando hay detección de cambios, después de hacer los cambios. Probarlo cambiando el input del nombre
    console.log('ngAfterContentChecked');
  }

  ngAfterViewInit(): void {
    // Se ejecuta una vez después del ngAfterContentInit. No depende de detecciones de cambios posteriores.
    console.log('ngAfterViewInit');
  }

  ngAfterViewChecked(): void {
    // Se ejecuta cuando hay detección de cambios, una vez hechos los cambios y están verificados. Probarlo cambiando el input del nombre
    console.log('ngAfterViewChecked');
  }

  ngOnDestroy(): void {
    // Se produce cuando el componente se destruye. Se suele utilizar para limpiar escuchas (Observables)
    // timerSubscription es la referencia al observable
    console.log('ngOnDestroy');
    this.timerSubscription.unsubscribe();
    console.log('timer limpiado');
  }
}

---------------------------------------------------------------------------------------------------
--life-cycle.component.html

<div class="container">
  <a href="https://angular.io/guide/lifecycle-hooks" target="_blank">Ciclos de vida de componentes Angular</a>
  <input [(ngModel)]="nombre">
</div>

---------------------------------------------------------------------------------------------------
--app.component.html

<app-life-cycle *ngIf="mostrar"></app-life-cycle>
<button class="btn btn-primary" (click)="mostrarOcultar()">Ocultar/Mostrar</button>

---------------------------------------------------------------------------------------------------
--app.component.ts

import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  mostrar = true;

  mostrarOcultar() {
    this.mostrar = !this.mostrar;
  }
}

---------------------------------------------------------------------------------------------------
ng g m clientes
ng g c clientes/mainPage --skip-tests=true   
---------------------------------------------------------------------------------------------------
--app.module.ts

....
import { ClientesModule } from './clientes/clientes.module';
....

  imports: [BrowserModule, FormsModule, ReactiveFormsModule, HttpClientModule, ClientesModule],

--------------------------------------------------------------------------------------------------
--clientes.module.ts

import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MainPageComponent } from './main-page/main-page.component';
import { FormsModule } from '@angular/forms';

@NgModule({
  imports: [CommonModule, FormsModule],
  declarations: [MainPageComponent],
  exports: [MainPageComponent]
})
export class ClientesModule {}

--------------------------------------------------------------------------------------------------
--app.component.html

<app-main-page></app-main-page>

--------------------------------------------------------------------------------------------------
Creamos en carpeta clientes el archivo clientes.models.ts
--------------------------------------------------------------------------------------------------
--clientes.models.ts

export interface ICliente {
  nombre: string;
  facturacion: number;
}

--------------------------------------------------------------------------------------------------
ng g c clientes/clientes --skip-tests=true  
ng g c clientes/agregar --skip-tests=true  
ng g s clientes/clientes --skip-tests=true  
--------------------------------------------------------------------------------------------------
--clientes.module.ts

import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { MainPageComponent } from './main-page/main-page.component';
import { ClientesComponent } from './clientes/clientes.component';
import { AgregarComponent } from './agregar/agregar.component';
import { ClientesService } from './clientes.service';

@NgModule({
  imports: [CommonModule, FormsModule],
  declarations: [MainPageComponent, ClientesComponent, AgregarComponent],
  exports: [MainPageComponent],
  providers: [ClientesService]
})
export class ClientesModule {}

--------------------------------------------------------------------------------------------------
--clientes.service.ts

import { Injectable } from '@angular/core';
import { ICliente } from './clientes.models';

@Injectable()
export class ClientesService {
  clientes: ICliente[] = [
    {
      id: 1,
      nombre: 'Unisys',
      facturacion: 10000
    },
    {
      id: 2,
      nombre: 'Arelance',
      facturacion: 5000
    }
  ];

  constructor() {}

  agregarCliente(cliente: ICliente): void {
    this.clientes.push(cliente);
  }

  modificarCliente(cliente: ICliente): void {
    const clienteModificar = this.clientes.find((x) => x.id === cliente.id);
    if (clienteModificar) {
      clienteModificar.nombre = cliente.nombre;
      clienteModificar.facturacion = cliente.facturacion;
    }
  }

  getClientes(): ICliente[] {
    return this.clientes;
  }
}

--------------------------------------------------------------------------------------------------
--agregar.component.ts

import { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';
import { ICliente } from '../clientes.models';
import { ClientesService } from '../clientes.service';

@Component({
  selector: 'app-agregar',
  templateUrl: './agregar.component.html',
  styleUrls: ['./agregar.component.css']
})
export class AgregarComponent implements OnInit, OnChanges {
  @Input() cliente: ICliente = {
    id: 0,
    nombre: '',
    facturacion: 0
  };

  @Input() edit: boolean = false;

  @Output() onNuevoCliente: EventEmitter<ICliente> = new EventEmitter();
  @Output() onModificadoCliente: EventEmitter<ICliente> = new EventEmitter();

  constructor(private clientesService: ClientesService) {}

  ngOnChanges(changes: SimpleChanges): void {
    // Puede ser útil para reaccionar a cambios. Por ejemplo, si queremos hacer una petición http cuando cambie cierto valor
    console.log('cambios detectados', changes);
  }

  ngOnInit() {}

  agregar() {
    if (this.cliente.nombre.trim().length === 0) {
      return;
    }

    if (this.edit) {
      this.clientesService.modificarCliente(this.cliente);
      this.onModificadoCliente.emit(this.cliente);
    } else {
      this.clientesService.agregarCliente(this.cliente);
      this.onNuevoCliente.emit(this.cliente);
    }

    this.cliente = {
      id: 0,
      nombre: '',
      facturacion: 0
    };
  }
}

--------------------------------------------------------------------------------------------------
--agregar.component.html

<h3>Agregar <small>{{ cliente.nombre }}</small></h3>
<hr>

<form (ngSubmit)="agregar()">
  <div class="form-group">
    <label>Nombre</label>
    <input type="text" class="form-control" placeholder="Nombre" name="nombre" [(ngModel)]="cliente.nombre" />
  </div>
  <div class="form-group my-4">
    <label>Facturacion</label>
    <input type="number" class="form-control" placeholder="Facturación" name="facturacion"
      [(ngModel)]="cliente.facturacion" />
  </div>
  <button type="submit" class="btn btn-success" *ngIf="!edit">
    Agregar
  </button>

  <button type="submit" class="btn btn-success" *ngIf="edit">
    Actualizar
  </button>

</form>

--------------------------------------------------------------------------------------------------
--clientes.component.ts

import { Component, EventEmitter, OnInit, Output } from '@angular/core';
import { ICliente } from '../clientes.models';
import { ClientesService } from '../clientes.service';

@Component({
  selector: 'app-clientes',
  templateUrl: './clientes.component.html',
  styleUrls: ['./clientes.component.css']
})
export class ClientesComponent implements OnInit {
  @Output() onEditarCliente: EventEmitter<ICliente> = new EventEmitter();

  get clientes() {
    return this.clientesService.getClientes();
  }

  constructor(private clientesService: ClientesService) {}

  ngOnInit() {}

  editar(cliente: ICliente) {
    this.onEditarCliente.emit(cliente);
  }
}

--------------------------------------------------------------------------------------------------
--clientes.component.html

<h3>Clientes</h3>
<hr>
<ul>
  <li *ngFor="let cliente of clientes">
    {{ cliente.nombre }} - {{ cliente.facturacion | currency:'EUR':'symbol-narrow':'1.2-2' }}
    <button type="button" class="btn btn-primary" (click)="editar(cliente)">Editar</button>
  </li>
</ul>

--------------------------------------------------------------------------------------------------
--main-page.component.html

<div class="container">
  <h1>Módulo de clientes</h1>
  <hr>
  <div class="row">
    <div class="col">
      <app-clientes></app-clientes>
    </div>
    <div class="col">
      <app-agregar [cliente]="cliente" (onNuevoCliente)="clienteAgregado($event)"></app-agregar>
    </div>
  </div>
</div>

--------------------------------------------------------------------------------------------------
--main-page.component.ts

import { Component, OnInit } from '@angular/core';
import { ICliente } from '../clientes.models';

@Component({
  selector: 'app-main-page',
  templateUrl: './main-page.component.html',
  styleUrls: ['./main-page.component.css']
})
export class MainPageComponent implements OnInit {
  cliente: ICliente = {
    id: 0,
    nombre: '',
    facturacion: 0
  };

  editar: boolean = false;

  constructor() {}

  ngOnInit() {}

  clienteAgregado(cliente: ICliente) {
    alert('Cliente ' + cliente.nombre + ' agregado/modificado con éxito');
  }

  editarCliente(cliente: ICliente) {
    this.cliente = cliente;
    this.editar = true;
  }
}

